// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	context "context"

	search "github.com/FleekHQ/space-daemon/core/search"
	mock "github.com/stretchr/testify/mock"
)

// FilesSearchEngine is an autogenerated mock type for the FilesSearchEngine type
type FilesSearchEngine struct {
	mock.Mock
}

// DeleteFileData provides a mock function with given fields: ctx, data
func (_m *FilesSearchEngine) DeleteFileData(ctx context.Context, data *search.DeleteIndexRecord) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *search.DeleteIndexRecord) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertFileData provides a mock function with given fields: ctx, data
func (_m *FilesSearchEngine) InsertFileData(ctx context.Context, data *search.InsertIndexRecord) (*search.IndexRecord, error) {
	ret := _m.Called(ctx, data)

	var r0 *search.IndexRecord
	if rf, ok := ret.Get(0).(func(context.Context, *search.InsertIndexRecord) *search.IndexRecord); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.IndexRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *search.InsertIndexRecord) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryFileData provides a mock function with given fields: ctx, query, limit
func (_m *FilesSearchEngine) QueryFileData(ctx context.Context, query string, limit int) ([]*search.IndexRecord, error) {
	ret := _m.Called(ctx, query, limit)

	var r0 []*search.IndexRecord
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*search.IndexRecord); ok {
		r0 = rf(ctx, query, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*search.IndexRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, query, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *FilesSearchEngine) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
