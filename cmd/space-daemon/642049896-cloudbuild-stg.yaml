steps:

  - name: 'gcr.io/cloud-builders/gcloud'
    args: ["info"]

  # # Note: Skipping this trigger as it's getting rate limited.
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args: [
  #       'beta',
  #       'functions',
  #       'call','gcp-cicd-set-pending',
  #       '--data={"commit_sha":"$COMMIT_SHA", "logUrl":"https://console.cloud.google.com/gcr/builds/$BUILD_ID"}'
  
  
  
  
  #     ]
  - id: 'Set Substitutions'
    name: 'ubuntu'
    args: ['bash', '-c', 'echo ${_CLOUD_SQL_CONNECTION:-terminal-stg:us-east4:microservices} > CLOUD_SQL_CONNECTION']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Pull Helm'
    waitFor: ['-']
    args: [
      'pull',
      'gcr.io/${PROJECT_ID}/helm'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Pull SQL Proxy'
    waitFor: ['-']
    args: [
      'pull',
      'gcr.io/cloudsql-docker/gce-proxy:1.15'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    id: 'Pull Builder'
    waitFor: ['-']
    args:
      - '-c'
      - |
        docker pull gcr.io/$PROJECT_ID/terminal-${_SERVICE_NAME}:builder || exit 0;

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Builder'
    waitFor: ['Pull Builder']
    args: [
        'build',
        '--target', 'builder',
        '-t', 'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:builder',
        '--cache-from', 'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:builder',
        '-f', 'services/${_SERVICE_NAME}/Dockerfile',
        '.'
      ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build App'
    waitFor: ['Build Builder']
    args: [
        'build',
        '-t', 'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:latest-stg',
        '-t', 'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:$COMMIT_SHA',
        '--cache-from', 'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:builder',
        '-f', 'services/${_SERVICE_NAME}/Dockerfile',
        '.'
      ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push by Commit SHA'
    waitFor: ['Build App']
    args: ["push", "gcr.io/$PROJECT_ID/terminal-${_SERVICE_NAME}:$COMMIT_SHA"]
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Latest'
    waitFor: ['Build App']
    args: ["push", "gcr.io/$PROJECT_ID/terminal-${_SERVICE_NAME}:latest-stg"]
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Builder'
    waitFor: ['Build Builder']
    args: ["push", "gcr.io/$PROJECT_ID/terminal-${_SERVICE_NAME}:builder"]

  - id: 'Cloud SQL Proxy'
    name: gcr.io/cloudsql-docker/gce-proxy:1.15
    entrypoint: sh
    args:
      - '-c'
      - '/cloud_sql_proxy -dir=/cloudsql -instances=$(cat CLOUD_SQL_CONNECTION) & while [ ! -f /cloudsql/stop ]; do sleep 2; done'
    waitFor: ['Pull SQL Proxy', 'Set Substitutions']
    timeout: '3000s'
    volumes:
      - name: db
        path: /cloudsql

  - id: 'Migrator Deps'
    name: node:8.15.1-alpine
    entrypoint: 'sh'
    waitFor: ['Build App']
    args: [
      '-c',
      'echo "{ \"name\": \"root\", \"dependencies\": { \"knex\": \"0.15.2\", \"dotenv\": \"6.2.0\", \"pg\": \"7.9.0\" } }" > package.json && yarn install'
    ]

  - id: 'Migrator'
    name: node:8.15.1-alpine
    entrypoint: 'sh'
    args: [
        '-c',
        'if [ -z "$_SKIP_MIGRATIONS" ]; then DB_HOST=/cloudsql/$(cat CLOUD_SQL_CONNECTION) yarn knex --knexfile services/${_SERVICE_NAME}/knexfile.js migrate:latest; else echo "Skipping migrations"; fi && touch /cloudsql/stop',
      ]
    volumes:
      - name: db
        path: /cloudsql
    env:
      - 'DB_PORT=5432'
      - 'DB_NAME=${_SERVICE_NAME}'
      - 'NODE_ENV=production'
      - 'DB_CLIENT=pg'
    secretEnv:
      - DB_USERNAME
      - DB_PASSWORD
    waitFor: ['Pull SQL Proxy', 'Migrator Deps', 'Push Latest', 'Set Substitutions']

  - name: 'gcr.io/$PROJECT_ID/helm'
    id: 'Deploy with Helm'
    waitFor: ['Pull Helm', 'Push by Commit SHA']
    args: [
      'upgrade',
        '-f', 'helm-values/stg/shared.yaml',
        '-f', 'services/${_SERVICE_NAME}/values.yaml',
        '-f', 'helm-values/stg/${_SERVICE_NAME}.yaml',
        '--namespace', 'default',
        '${_SERVICE_NAME}',
        'services/${_SERVICE_NAME}',
        '--set', 'image=gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:$COMMIT_SHA',
        '--set', 'builderImage=gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:builder',
        '--tiller-connection-timeout=1000',
        '--install',
        '--debug'
      ]
    env:
    - 'CLOUDSDK_COMPUTE_ZONE=us-west1-b'
    - 'CLOUDSDK_CONTAINER_CLUSTER=stg-cluster'

timeout: 3000s
images: [
    'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:builder',
    'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:latest-stg',
    'gcr.io/${PROJECT_ID}/terminal-${_SERVICE_NAME}:$COMMIT_SHA'
  ]
secrets:
  - kmsKeyName: projects/terminal-stg/locations/global/keyRings/terminalPrivKeys/cryptoKeys/builderAcct
    secretEnv:
      DB_USERNAME: CiQAJA+sxxdYnqudn45x8PPS5/9l3K5cThaOQuHlSFveVL3IrxMSMwCOZJ28K1cGJYpALaElLhH6Q3ZgQgD8oyZvKCyqwqhOC5Vu6KvwduuT5WFibosJoOM0gw==
      DB_PASSWORD: CiQAJA+sx7ae0vonzXlV/rGZxUG3ExCk/8tMW2vJTCXT1EJN7MESPQCOZJ287D4/IrEVEaLNaFwr6p2GBHQqUBztQi3Wui15TA0k+f2Mi1cFZ+1IwQjxglk2oA8nOurXRLz5VO4=
